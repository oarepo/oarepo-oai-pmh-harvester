#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create run and record tables"""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "5f7f68fc9fe4"
down_revision = "b2a45c3a744e"
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "oai_harvest_runs",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("harvester_id", sa.String(length=255), nullable=False),
        sa.Column("manual", sa.Boolean(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=True),
        sa.Column(
            "harvester_config",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=False,
        ),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=True),
        sa.Column("last_update_time", sa.DateTime(), nullable=True),
        sa.Column("status", sa.String(length=10), nullable=False),
        sa.Column("records", sa.Integer(), nullable=False),
        sa.Column("finished_records", sa.Integer(), nullable=False),
        sa.Column("ok_records", sa.Integer(), nullable=False),
        sa.Column("failed_records", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_oai_harvest_runs")),
    )
    op.create_table(
        "oai_harvest_records",
        sa.Column("oai_identifier", sa.String(length=255), nullable=False),
        sa.Column("record_id", sa.String(length=255), nullable=True),
        sa.Column("datestamp", sa.DateTime(), nullable=False),
        sa.Column("harvested_at", sa.DateTime(), nullable=False),
        sa.Column("deleted", sa.Boolean(), nullable=False),
        sa.Column("has_errors", sa.Boolean(), nullable=False),
        sa.Column("has_warnings", sa.Boolean(), nullable=False),
        sa.Column(
            "errors",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "original_data",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "transformed_data",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=False,
        ),
        sa.Column("run_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.ForeignKeyConstraint(
            ["run_id"],
            ["oai_harvest_runs.id"],
            name=op.f("fk_oai_harvest_records_run_id_oai_harvest_runs"),
        ),
        sa.PrimaryKeyConstraint("oai_identifier", name=op.f("pk_oai_harvest_records")),
    )
    op.drop_table("oai_record_metadata_version")
    op.drop_table("oai_run_metadata")
    op.drop_index(
        "ix_oai_run_metadata_version_end_transaction_id",
        table_name="oai_run_metadata_version",
    )
    op.drop_index(
        "ix_oai_run_metadata_version_operation_type",
        table_name="oai_run_metadata_version",
    )
    op.drop_index(
        "ix_oai_run_metadata_version_transaction_id",
        table_name="oai_run_metadata_version",
    )
    op.drop_table("oai_run_metadata_version")
    op.drop_table("oai_record_metadata")
    op.alter_column(
        "oai_harvester_metadata_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "oai_harvester_metadata_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "oai_harvester_metadata_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=False,
    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("oai_harvest_records")
    op.drop_table("oai_harvest_runs")
    # ### end Alembic commands ###
